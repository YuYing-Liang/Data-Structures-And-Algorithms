from queue import *
import tree

class binary_tree:
	def __init__(self, val):
		self.store = [val,[],[]]

	def AddLeft(self, val):
		self.store[1] += [val]
		return True

	def AddRight(self, val):
		self.store[2] += [val]
		return True

	def Get_LevelOrder(self):
		q = queue([])
		returnList = []

		if self.store == []:
			return False

		q.push(self.store)

		while q.getLength() > 0:
			currNode = q.getValues()[0]
			if type(currNode[0]) != int:
				currNode = currNode[0].store
	
			if len(currNode) > 1:
				if currNode[1] != []:
					if type(currNode[1][0]) == int:
						q.push(currNode[1])
					else:
						q.push(currNode[1][0].store)
				if currNode[2] != []:
					if type(currNode[2][0]) == int:
						q.push(currNode[2])
					else:
						q.push(currNode[2][0].store)

			val = q.shift()
			returnList += [val[0]]

		return returnList
	
	def ConvertToTree(self, root):
		genTree = tree.tree(root.store[0])
		child_node = root.store[1][0]
	
		#print(root.store)

		
		if child_node != []:
			if child_node.store[2] == []:
				if child_node.store[1] != []:
					child_node = self.ConvertToTree(child_node)
				genTree.AddSuccessor(child_node)
			
			while child_node.store[2] != []:

				if child_node.store[1] != []:
					child_node = self.ConvertToTree(child_node)
				genTree.AddSuccessor(tree.tree(child_node.store[0]))
				print(child_node.store)
				print(child_node.store[2])
				print("asdf")
				child_node = child_node.store[2][0].store
				if child_node[2] == []:
					genTree.AddSuccessor(tree.tree(child_node[0]))
					break

		return genTree



